<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sNextPlayer</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game = oGameData.id
main = oMain.id

image_alpha = 0
depth = 10000
opacity = 0
input = ""
number = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = main.opacity

if(!main.unclickable){
    if mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, id){
        main.newEncounter = true
        main.unclickable = true
    }
}

if(main.newEncounter = true){
    depth = -100
    input = getInputNumbersOnly(input)
    if(keyboard_check(vk_enter)){
        number = real(input)
        input = ""
    }
    // from here we can go and actually do the whole lookup thing which means I have to go through the stuff
}
else{
    depth = 0
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_self()
draw_text_transformed(x,y, "New Encounter", .75, .75, 0)

// so what we need is an opacity all to its own
// we need the background to fade in along with the text written and what numbers are 
//       being entered
// then we use the get input and make the string, develop a string to int function (not hard at all)
// then go through and minus 1 to it (cause thats how oGameData works)
// lookup if the number entered is in range
// lookup if number entered is above (84 I think) because those will always be like a (trait) (whatever creatures on your card)
// then go through the rules to quad check and make sure you're following correctly
// Have a reaction matrix show on screen, then whichever is picked lookup what that reacion is in the reacion matrix
//       and show the passage chosen.
// The pasage chose might be more of a pain to implement and might just want to leave that for the players to do since its not much work
//       on their part
// then plus 1 or -1 depending on the 

if(main.newEncounter){
    // if new encounter is being pressed we want to bring in the sprite background that goes over everything
    if(opacity &lt; 1) {
        opacity += 1/room_speed
        if (opacity &gt;= 1){opacity = 1} // this looks dumb but its so i dont assign it every frame I only need to do it once
    }
    
    draw_sprite_ext(sFadeInBackground,0,room_width/2,room_height/2,1,1,0,0,opacity)
}

draw_text(room_width/2, room_height/2, input)

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
