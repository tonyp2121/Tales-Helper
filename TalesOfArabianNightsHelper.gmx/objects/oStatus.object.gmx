<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sStatus</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game = oGameData.id
main = oMain.id
statusType = 0 // 0 is for adding one while the rest
givenDepth = -100 
opacityLocation = 0
currentPlayer = game.currentPlayer
opacity = 0
xscale = 1
yscale = 1
image_alpha = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_index = statusType
depth = givenDepth

if ((opacity == 0 or opacityLocation.opacity == 0) and currentPlayer =! game.currentPlayer){instance_destroy()}
if (statusType == 0 &amp;&amp; !main.unclickable) {
    // if clicked on it should change main value of some name to make a picker thing
   
    if mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, id){
    main.unclickable = true;
    main.statusPicker = true;
    buttonInitialX = room_width/15
    buttonInitialY = room_height/9
    buttonSpawnX = buttonInitialX
    buttonSpawnY = buttonInitialY
    buttonIncrementX = room_width/9
    buttonIncrementY = room_height/5
    for (i = 0; i &lt; 28; i+= 1){
        status[i] = instance_create(buttonSpawnX, buttonSpawnY, oStatus)
        status[i].statusType = i + 1
        status[i].givenDepth = -104
        status[i].opacityLocation = self.id
        status[i].xscale = .5
        status[i].yscale = .5
        status[i].givenDepth = -1000
        buttonSpawnX += buttonIncrementX
        if ( i % 7 == 6){
        buttonSpawnX = buttonInitialX
        buttonSpawnY += buttonIncrementY
        }
    }
    }
}
if (opacity &lt; 0 &amp;&amp; statusType == 0) {
        opacity = 0
        
        for (i = 0; i &lt; 18; i+= 1){
        instance_destroy(status[i])
        }
        instance_destroy(self.id)
    }
if(statusType != 0  &amp;&amp; main.statusPicker){
    // when picker is up let you select the current status
    if mouse_check_button_released(mb_left) &amp;&amp; position_meeting(mouse_x, mouse_y, id){
    main.statusPicker = false
    game.status[game.currentPlayer,statusType - 1] = true
    main.unclickable = false
    main.statusSpawn = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_alpha = opacityLocation.opacity
image_index = statusType
depth = givenDepth
image_xscale = xscale
image_yscale = yscale
draw_self()

if(main.statusPicker &amp;&amp; statusType == 0){
    image_alpha = opacity
    opacity += 1/room_speed;
    if (opacity &gt; 1) {opacity = 1}
    draw_sprite_ext(sFadeInBackground, 0, room_width/2, room_height/2, 1, 1, 0, -1, opacity) 
}
if(!main.statusPicker &amp;&amp; statusType == 0 &amp;&amp; opacity &gt; 0){
    image_alpha = opacity
    opacity -= 1/room_speed
    draw_sprite_ext(sFadeInBackground, 0, room_width/2, room_height/2, 1, 1, 0, -1, opacity) 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
